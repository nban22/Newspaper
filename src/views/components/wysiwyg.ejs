<!-- Import Styles and Scripts -->
<link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
  integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<link rel="stylesheet" href="/css/components/wysiwyg.css">

<!-- Form -->
<form method="get" id="editor-form">
  <!-- Title Section -->
  <div class="mb-3">
    <label for="title" class="form-label">
      <h2>Tiêu đề</h2>
    </label>
    <input type="text" id="title" name="title" class="form-control" placeholder="Nhập tiêu đề"
      value="<%= article ? article.title : '' %>" required />
  </div>

  <!-- Summary Section -->
  <div class="mb-3">
    <label for="summary-editor" class="form-label">
      <h2>Tóm tắt</h2>
    </label>
    <div id="summary-editor" class="quill-editor" data-content="<%= article ? article.summary : '' %>"></div>
  </div>

  <!-- Content Section -->
  <div class="mb-3">
    <label for="content-editor" class="form-label">
      <h2>Nội dung</h2>
    </label>
    <div id="content-editor" class="quill-editor" data-content="<%= article ? article.content : '' %>"></div>
  </div>

  <!-- Thumbnail Section -->
  <div class="mb-3">
    <label for="thumbnail" class="form-label">
      <h2>Ảnh nổi bật</h2>
    </label>
    <input type="url" id="thumbnail" name="thumbnail" class="form-control" placeholder="Enter thumbnail URL" required
      value="<%= article ? article.thumbnail : '' %>" required />

    <!-- Thumbnail Preview -->
    <div class="mt-3">
      <img id="thumbnail-preview" src="" alt="Thumbnail Preview" class="img-fluid"
        style="max-width: 300px; display: none;" />
    </div>
  </div>


  <!-- Category Section -->
  <div class="mb-3">
    <label for="category" class="form-label">
      <h2>Chuyên mục</h2>
    </label>
    <select id="category" name="category_id" class="form-select" required>
      <option value="" disabled selected>Chọn chuyên mục cho bài viết</option>
      <% if (article) { %>
        <option value="<%= article.category_id._id %>" selected>
          <%= article.category_id.name %>
        </option>
        <% } %>
          <!-- Categories will be dynamically loaded here -->
    </select>
  </div>


  <!-- Tags Section -->
  <div id="article-id-container" data-article-id="<%= article ? article._id : '' %>"></div>
  <div class="mb-3">
    <label for="tags" class="form-label">
      <h2>Nhãn</h2>
    </label>
    <div id="tags-container" class="tag-selection-container">
      <!-- Selected tags will be shown here -->
      <div id="selected-tags-preview" class="selected-tags"></div>

      <!-- Available tags grid -->
      <div id="tags-grid" class="tags-grid">
        <!-- Tags will be dynamically inserted here -->
      </div>

      <div id="add-tag-button-container" class="tag-item add-new-tag">
        <button type="button" id="add-tag-button" class="btn btn-primary">+</button>
      </div>

      <!-- Input form for new tag (initially hidden) -->
      <div id="new-tag-form" style="display: none;">
        <input type="text" id="new-tag-name" class="form-control" placeholder="Nhập tên nhãn" />
        <button type="button" id="save-tag-button" class="btn btn-success mt-2">Lưu Nhãn</button>
        <button type="button" id="cancel-tag-button" class="btn btn-secondary mt-2">Hủy</button>
      </div>

    </div>
    <input type="hidden" id="selected-tags" name="tags" />
  </div>

  <!-- Premium Checkbox Section -->
  <div class="form-check mb-3">
    <input type="checkbox" class="form-check-input" id="is_premium" name="is_premium" <%=article && article.is_premium
      ? 'checked' : '' %>
    />
    <label class="form-check-label" for="is_premium">
      Đánh dấu là Premium
    </label>
  </div>


  <!-- Submit Button -->
  <button type="submit" class="btn btn-primary">Gửi yêu cầu</button>
</form>

<!-- Quill Initialization -->
<script>

  // Get input and preview elements
  const thumbnailInput = document.getElementById('thumbnail');
  const thumbnailPreview = document.getElementById('thumbnail-preview');

  // Function to update the thumbnail preview
  const updateThumbnailPreview = () => {
    const url = thumbnailInput.value;

    // Validate the URL format (optional but recommended)
    try {
      new URL(url); // Ensures the URL is valid
      thumbnailPreview.src = url;
      thumbnailPreview.style.display = 'block'; // Show the image
    } catch {
      thumbnailPreview.style.display = 'none'; // Hide if URL is invalid
    }
  };

  // Display the thumbnail preview on page load if the input has a value
  if (thumbnailInput.value.trim()) {
    updateThumbnailPreview();
  }

  // Attach event listener for input changes
  thumbnailInput.addEventListener('input', updateThumbnailPreview);


  const accessToken = localStorage.getItem('accessToken');

  const uploadImage = async (file) => {
    const formData = new FormData();
    formData.append('image', file);

    const response = await fetch('/api/v1/articles/upload', {
      method: 'POST',
      body: formData,
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    if (!response.ok) {
      throw new Error('Image upload failed');
    }

    const data = await response.json();


    return data.data.imageUrl;
  };

  const customImageHandler = (quill) => {
    const input = document.createElement('input');
    input.setAttribute('type', 'file');
    input.setAttribute('accept', 'image/*');
    input.click();

    input.onchange = async () => {
      const file = input.files[0];
      if (file) {
        try {
          const url = await uploadImage(file);

          // Insert image into Quill
          const range = quill.getSelection();
          quill.insertEmbed(range.index, 'image', url);

        } catch (error) {
          console.error('Error uploading image:', error);
          alert('Failed to upload image.');
        }
      }
    };
  };


  // Initialize Quill editors
  const summaryEditor = new Quill('#summary-editor', {
    theme: 'snow',
    modules: {
      syntax: true,
      toolbar: [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote'],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        [{ 'script': 'sub' }, { 'script': 'super' }],    // Subscript/Superscript
        [{ 'align': [] }],                              // Text Alignment
        [{ 'color': [] }, { 'background': [] }],        // Text/Background color
      ],
    },
    placeholder: 'Compose the summary content...',
  });

  const contentEditor = new Quill('#content-editor', {
    theme: 'snow',
    modules: {
      syntax: true,
      toolbar: [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote'],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        [{ 'header': [1, 2, 3, false] }],
        [{ 'script': 'sub' }, { 'script': 'super' }],    // Subscript/Superscript
        [{ 'align': [] }],                              // Text Alignment
        [{ 'color': [] }, { 'background': [] }],        // Text/Background color
        ['link', 'image', 'video']                      // Links, Images, Videos
      ],
    },
    placeholder: 'Compose the main content...',
  });

  contentEditor.getModule('toolbar').addHandler('image', () => customImageHandler(contentEditor));
  const summaryContent = document.querySelector('#summary-editor').getAttribute('data-content');
  const contentContent = document.querySelector('#content-editor').getAttribute('data-content');

  contentEditor.on('text-change', async (delta, oldDelta, source) => {
    if (source === 'user') {
      // Get the editor's content as HTML
      const htmlContent = contentEditor.root.innerHTML;

      // Use a regex to find base64 image strings
      const base64ImageRegex = /<img src="data:image\/[a-zA-Z]+;base64,[^"]+"[^>]*>/g;
      const matches = htmlContent.match(base64ImageRegex);

      if (matches) {
        for (const match of matches) {
          // Extract the base64 string
          const base64String = match.match(/src="([^"]+)"/)[1];

          // Convert base64 to a Blob
          const blob = base64ToBlob(base64String);

          try {
            // Upload the Blob
            const url = await uploadImage(blob);

            // Replace base64 image with the uploaded URL
            const newHtmlContent = htmlContent.replace(base64String, url);
            contentEditor.root.innerHTML = newHtmlContent;
          } catch (error) {
            console.error('Error uploading pasted image:', error);
          }
        }
      }
    }
  });

  // Helper function: Convert base64 string to Blob
  function base64ToBlob(base64) {
    const byteString = atob(base64.split(',')[1]);
    const mimeString = base64.split(',')[0].split(':')[1].split(';')[0];
    const buffer = new Uint8Array(byteString.length);

    for (let i = 0; i < byteString.length; i++) {
      buffer[i] = byteString.charCodeAt(i);
    }

    return new Blob([buffer], { type: mimeString });
  }

  if (summaryContent) {
    summaryEditor.clipboard.dangerouslyPasteHTML(summaryContent);
  }

  if (contentContent) {
    contentEditor.clipboard.dangerouslyPasteHTML(contentContent);
  }



  // Get the add tag button, input form, and buttons
  const addTagButton = document.getElementById('add-tag-button');
  const newTagForm = document.getElementById('new-tag-form');
  const newTagNameInput = document.getElementById('new-tag-name');
  const saveTagButton = document.getElementById('save-tag-button');
  const cancelTagButton = document.getElementById('cancel-tag-button');
  const tagsGrid = document.getElementById('tags-grid');
  const selectedTagsInput = document.getElementById('selected-tags');

  // Show the input form when the 'Add More Tags' button is clicked
  addTagButton.addEventListener('click', function () {
    newTagForm.style.display = 'block'; // Show the form
    addTagButton.style.display = 'none'; // Hide the add button
  });

  // Save the new tag when the 'Save' button is clicked
  saveTagButton.addEventListener('click', function () {
    const tagName = newTagNameInput.value.trim();

    if (tagName) {
      fetch('/api/v1/tags/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify({ name: tagName }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Failed to add tag');
          }
          return response.json();
        })
        .then((data) => {
          // Update the hidden input with the new tags
          // Add the tag to the grid
          const tagDiv = document.createElement('div');
          tagDiv.className = 'tag-item';
          tagDiv.textContent = tagName;
          tagDiv.dataset.id = data.data.tag._id;

          tagDiv.addEventListener('click', () => {
            if (tagDiv.classList.contains('selected')) {
              removeTag(tagDiv.dataset.id, tagName, tagDiv);
            } else {
              addTag(tagDiv.dataset.id, tagName, tagDiv);
            }
          });
          tagsGrid.appendChild(tagDiv);
        })
        .catch((error) => {
          console.error('Error adding tag:', error);
          alert('Failed to add tag.');
        });

      // Clear the input field and hide the form
      newTagNameInput.value = '';
      newTagForm.style.display = 'none';
      addTagButton.style.display = 'block'; // Show the add button again
    } else {
      alert('Please enter a tag name.');
    }
  });

  // Add tag to the selected list
  function addTag(id, name, element) {
    element.classList.add('selected');

    const selectedTagsContainer = document.getElementById('selected-tags-preview');
    const tagBadge = document.createElement('span');
    tagBadge.className = 'badge';
    tagBadge.textContent = name;
    tagBadge.dataset.id = id;

    tagBadge.addEventListener('click', () => {
      removeTag(id, name, element);
    });

    selectedTagsContainer.appendChild(tagBadge);
    updateSelectedTagsInput();
  }

  // Remove tag from the selected list
  function removeTag(id, name, element) {
    element.classList.remove('selected');

    const selectedTagsContainer = document.getElementById('selected-tags-preview');
    const tagBadge = Array.from(selectedTagsContainer.children).find(badge => badge.dataset.id === id);
    if (tagBadge) {
      selectedTagsContainer.removeChild(tagBadge);
    }
    updateSelectedTagsInput();
  }

  // Update the hidden input with selected tags
  function updateSelectedTagsInput() {
    const selectedTagsContainer = document.getElementById('selected-tags-preview');
    const selectedIds = Array.from(selectedTagsContainer.children).map(tag => tag.dataset.id);
    document.getElementById('selected-tags').value = JSON.stringify(selectedIds);
  }

  // Cancel adding a new tag when the 'Cancel' button is clicked
  cancelTagButton.addEventListener('click', function () {
    // Clear the input field and hide the form
    newTagNameInput.value = '';
    newTagForm.style.display = 'none';
    addTagButton.style.display = 'block'; // Show the add button again
  });

  // Function to update the selected tags hidden input
  function updateSelectedTags(tagName) {
    const existingTags = selectedTagsInput.value.split(',').filter(tag => tag.trim() !== '');
    if (!existingTags.includes(tagName)) {
      existingTags.push(tagName);
    }
    selectedTagsInput.value = existingTags.join(',');
  }
</script>


<script src="<%= script %>"></script>